generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coach {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  Athlete  Athlete[]
  Workout  Workout[]
  Exercise Exercise[]
  History  History[]
}

enum ExerciseCategory {
  CHEST
  BACK
  LEGS
  SHOULDERS
  BICEPS
  TRICEPS
  FOREARMS
  OTHER
}

model Exercise {
  id           String    @id @default(uuid())
  title        String
  description  String
  createdAt    DateTime  @default(now())
  category     String
  coachId      String?
  athleteId    String?
  normalUserId String?
  mediaUrl     String?
  previewUrl   String?
  updatedAt    DateTime? @updatedAt
  workoutId    String?
  series       Int
  weights      Int[]
  repetitions  Int[]

  Workout    Workout?    @relation(fields: [workoutId], references: [id])
  Athlete    Athlete?    @relation(fields: [athleteId], references: [id])
  NormalUser NormalUser? @relation(fields: [normalUserId], references: [id], onDelete: Cascade)
  Coach      Coach?      @relation(fields: [coachId], references: [id])
}

model Athlete {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  coachId   String

  coach    Coach      @relation(fields: [coachId], references: [id])
  Exercise Exercise[]
  Workout  Workout[]
  History  History[]
}

model NormalUser {
  id                            String     @id @default(uuid())
  name                          String
  email                         String     @unique
  password                      String?
  avatarUrl                     String?
  recoveryPasswordCode          String?
  recoveryPasswordCodeExpiresIn DateTime?
  createdAt                     DateTime   @default(now())
  updatedAt                     DateTime?  @updatedAt
  Workout                       Workout[]
  Exercise                      Exercise[]
  History                       History[]
}

model Workout {
  id             String     @id @default(uuid())
  title          String
  coachId        String?
  athleteId      String?
  normalUserId   String?
  timesCompleted Int        @default(0)
  favorite       Boolean    @default(false)
  exercises      Exercise[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt

  athlete    Athlete?    @relation(fields: [athleteId], references: [id])
  coach      Coach?      @relation(fields: [coachId], references: [id])
  NormalUser NormalUser? @relation(fields: [normalUserId], references: [id], onDelete: Cascade)
  History    History[]
}

model History {
  id              String    @id @default(uuid())
  elapsedTime     Int
  completedAt     DateTime
  workoutFavorite Boolean
  workoutTitle    String
  workoutId       String
  coachId         String?
  athleteId       String?
  normalUserId    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  athlete    Athlete?    @relation(fields: [athleteId], references: [id])
  coach      Coach?      @relation(fields: [coachId], references: [id])
  NormalUser NormalUser? @relation(fields: [normalUserId], references: [id], onDelete: Cascade)
  workout    Workout     @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}
